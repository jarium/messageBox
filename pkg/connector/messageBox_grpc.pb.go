// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.3
// source: messageBox.proto

package connector

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MessageBoxClient is the client API for MessageBox service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MessageBoxClient interface {
	SendMessages(ctx context.Context, opts ...grpc.CallOption) (MessageBox_SendMessagesClient, error)
	ReceiveMessages(ctx context.Context, in *Void, opts ...grpc.CallOption) (MessageBox_ReceiveMessagesClient, error)
}

type messageBoxClient struct {
	cc grpc.ClientConnInterface
}

func NewMessageBoxClient(cc grpc.ClientConnInterface) MessageBoxClient {
	return &messageBoxClient{cc}
}

func (c *messageBoxClient) SendMessages(ctx context.Context, opts ...grpc.CallOption) (MessageBox_SendMessagesClient, error) {
	stream, err := c.cc.NewStream(ctx, &MessageBox_ServiceDesc.Streams[0], "/messageBox.MessageBox/sendMessages", opts...)
	if err != nil {
		return nil, err
	}
	x := &messageBoxSendMessagesClient{stream}
	return x, nil
}

type MessageBox_SendMessagesClient interface {
	Send(*Message) error
	CloseAndRecv() (*SendMessageResponse, error)
	grpc.ClientStream
}

type messageBoxSendMessagesClient struct {
	grpc.ClientStream
}

func (x *messageBoxSendMessagesClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *messageBoxSendMessagesClient) CloseAndRecv() (*SendMessageResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(SendMessageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *messageBoxClient) ReceiveMessages(ctx context.Context, in *Void, opts ...grpc.CallOption) (MessageBox_ReceiveMessagesClient, error) {
	stream, err := c.cc.NewStream(ctx, &MessageBox_ServiceDesc.Streams[1], "/messageBox.MessageBox/receiveMessages", opts...)
	if err != nil {
		return nil, err
	}
	x := &messageBoxReceiveMessagesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MessageBox_ReceiveMessagesClient interface {
	Recv() (*Message, error)
	grpc.ClientStream
}

type messageBoxReceiveMessagesClient struct {
	grpc.ClientStream
}

func (x *messageBoxReceiveMessagesClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MessageBoxServer is the server API for MessageBox service.
// All implementations must embed UnimplementedMessageBoxServer
// for forward compatibility
type MessageBoxServer interface {
	SendMessages(MessageBox_SendMessagesServer) error
	ReceiveMessages(*Void, MessageBox_ReceiveMessagesServer) error
	mustEmbedUnimplementedMessageBoxServer()
}

// UnimplementedMessageBoxServer must be embedded to have forward compatible implementations.
type UnimplementedMessageBoxServer struct {
}

func (UnimplementedMessageBoxServer) SendMessages(MessageBox_SendMessagesServer) error {
	return status.Errorf(codes.Unimplemented, "method SendMessages not implemented")
}
func (UnimplementedMessageBoxServer) ReceiveMessages(*Void, MessageBox_ReceiveMessagesServer) error {
	return status.Errorf(codes.Unimplemented, "method ReceiveMessages not implemented")
}
func (UnimplementedMessageBoxServer) mustEmbedUnimplementedMessageBoxServer() {}

// UnsafeMessageBoxServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessageBoxServer will
// result in compilation errors.
type UnsafeMessageBoxServer interface {
	mustEmbedUnimplementedMessageBoxServer()
}

func RegisterMessageBoxServer(s grpc.ServiceRegistrar, srv MessageBoxServer) {
	s.RegisterService(&MessageBox_ServiceDesc, srv)
}

func _MessageBox_SendMessages_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MessageBoxServer).SendMessages(&messageBoxSendMessagesServer{stream})
}

type MessageBox_SendMessagesServer interface {
	SendAndClose(*SendMessageResponse) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type messageBoxSendMessagesServer struct {
	grpc.ServerStream
}

func (x *messageBoxSendMessagesServer) SendAndClose(m *SendMessageResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *messageBoxSendMessagesServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MessageBox_ReceiveMessages_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Void)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MessageBoxServer).ReceiveMessages(m, &messageBoxReceiveMessagesServer{stream})
}

type MessageBox_ReceiveMessagesServer interface {
	Send(*Message) error
	grpc.ServerStream
}

type messageBoxReceiveMessagesServer struct {
	grpc.ServerStream
}

func (x *messageBoxReceiveMessagesServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

// MessageBox_ServiceDesc is the grpc.ServiceDesc for MessageBox service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MessageBox_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "messageBox.MessageBox",
	HandlerType: (*MessageBoxServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "sendMessages",
			Handler:       _MessageBox_SendMessages_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "receiveMessages",
			Handler:       _MessageBox_ReceiveMessages_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "messageBox.proto",
}
